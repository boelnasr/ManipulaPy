# ──────────────────────────────────────────────────────────────
# Project build configuration for ManipulaPy
# ──────────────────────────────────────────────────────────────

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

# ------------------------------------------------------------------
[project]
name = "ManipulaPy"
version = "1.1.1"                      
authors = [
    { name = "Mohamed Aboelnar", email = "aboelnasr1997@gmail.com" },
]
description = "A comprehensive Python package for robotic manipulator analysis and control"
readme = "README.md"
license = { text = "AGPL-3.0-or-later" }
requires-python = ">=3.8"

classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = [
    "robotics",
    "kinematics",
    "dynamics",
    "trajectory-planning",
    "simulation",
    "cuda",
]

# ------------------------------------------------------------------
# Core runtime dependencies - ENSURE ALL CORE DEPS ARE HERE
dependencies = [
    "numpy>=1.19.2",
    "scipy>=1.5.2", 
    "matplotlib>=3.3",
    "numba>=0.55",
    "torch>=1.8.0",
]

[project.optional-dependencies]
# Core optional dependencies
core-optional = [
    "scikit-learn>=1.0",
]

# Simulation dependencies
simulation = [
    "pybullet>=3.0.6",
    "urchin>=0.0.27",
    "trimesh>=3.9.14",
]

# Vision dependencies  
vision = [
    "opencv-python>=4.5",
    "ultralytics>=8.0",
    "pillow>=8.0.0",
]

# AI/ML dependencies (torch moved to core)
ml = [
    "scikit-learn>=1.0",
    "torchvision>=0.9.0",
]

# GPU support
gpu-cuda11 = ["cupy-cuda11x>=10.0.0"]
gpu-cuda12 = ["cupy-cuda12x>=12.0.0"]
gpu-rocm = ["cupy-rocm-4-3>=10.0.0"]
gpu-pycuda = ["pycuda>=2021.1"]
gpu = ["cupy-cuda11x>=10.0.0"]

# Development and testing dependencies
dev = [
    "pytest>=6.0.0",
    "pytest-cov>=3.0.0",
    "pytest-mock>=3.6.0",
    "pytest-xvfb>=2.0.0",
    "pytest-timeout>=2.1.0",  # This plugin is needed for timeout config
    "coverage[toml]>=6.0.0",
    "black>=22.0.0",
    "flake8>=4.0.0",
    "isort>=5.10.0",
    "mypy>=0.950",
    "pre-commit>=2.15.0",
]

# Documentation dependencies
docs = [
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.15.0",
]

# Testing combinations
test-core = ["ManipulaPy[dev]"]
test-simulation = ["ManipulaPy[dev,simulation]"]
test-vision = ["ManipulaPy[dev,vision]"]
test-gpu = ["ManipulaPy[dev,gpu-cuda11]"]
test-full = ["ManipulaPy[dev,simulation,vision,ml]"]

# All optional dependencies
all = ["ManipulaPy[core-optional,simulation,vision,ml,docs]"]

[project.urls]
Homepage = "https://github.com/boelnasr/ManipulaPy"
Documentation = "https://manipulapy.readthedocs.io/"
Repository = "https://github.com/boelnasr/ManipulaPy.git"
"Bug Tracker" = "https://github.com/boelnasr/ManipulaPy/issues"

# ------------------------------------------------------------------
[tool.setuptools]
packages = ["ManipulaPy"]
include-package-data = true

[tool.setuptools.package-data]
"ManipulaPy" = [
    "*.yml",
    "*.yaml",
    "*.json",
    "*.urdf",
    "*.stl",
    "*.dae",
    "*.obj",
]
"ManipulaPy.ManipulaPy_data" = ["*"]
"ManipulaPy.ManipulaPy_data.xarm" = [
    "*.urdf",
    "*.stl",
    "*.dae", 
    "*.obj",
    "*.yml",
    "*.yaml",
    "xarm_description/**/*",
    "xarm_gripper/**/*",
]
"ManipulaPy.ManipulaPy_data.ur5" = [
    "*.urdf",
    "*.stl",
    "*.dae",
    "*.obj", 
    "*.yml",
    "*.yaml",
    "collision/**/*",
    "visual/**/*",
]

[tool.setuptools.package-dir]
"" = "."

# ==================================================================================
# TESTING CONFIGURATION
# ==================================================================================

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"] 
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--tb=short",
    "--maxfail=10",
    "--disable-warnings",
    "--durations=10",  # Show 10 slowest tests
]

markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "cuda: marks tests as requiring GPU/CUDA (will skip if not available)",
    "gpu: alias for cuda marker",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "vision: marks tests requiring vision dependencies (OpenCV, YOLO)",
    "simulation: marks tests requiring simulation dependencies (PyBullet, URCHIN)",
    "ml: marks tests requiring machine learning dependencies",
    "network: marks tests requiring network access",
]

filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore:.*CUDA.*:UserWarning",
    "ignore:.*cupy.*:UserWarning", 
    "ignore:.*numba.*:UserWarning",
    "ignore:.*OpenGL.*:UserWarning",
    "ignore:.*PyBullet.*:UserWarning",
    "ignore:.*torch.*:UserWarning",
    "ignore:.*matplotlib.*:UserWarning",
    "ignore::RuntimeWarning:numba.*",
    "ignore::ImportWarning",  # Ignore our graceful import warnings
]

# Only include timeout if pytest-timeout is installed
# In CI, we'll install pytest-timeout, but for basic testing it's optional
# timeout = 300
# timeout_method = "thread"

# Use norecursedirs instead of collect_ignore (which is not a valid pytest option)
norecursedirs = [
    "build",
    "dist", 
    ".eggs",
    "*.egg-info",
    ".git",
    ".tox",
    ".pytest_cache",
    "__pycache__",
    "Examples*",
    "Benchmark*", 
    "benchmark_results*",
    "paper",
    "figures",
    "docs",
    "venv*",
    "htmlcov",
]

# ==================================================================================
# COVERAGE CONFIGURATION
# ==================================================================================

[tool.coverage.run]
source = ["ManipulaPy"]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/test_*", 
    "*/*test*.py",
    "*/Examples/*",
    "*/Examples_old_backup_*/*",
    "*/Benchmark/*",
    "*/benchmark_results/*",
    "*/docs/*",
    "*/__pycache__/*",
    "*/build/*",
    "*/dist/*",
    "*/_version.py",
    "setup.py",
    "*/ManipulaPy_data/*",
    "*/venv*/*",
    "*/env/*",
    "*/.venv/*",
    "*/paper/*",
    "*/figures/*",
]

[tool.coverage.paths]
source = [
    "ManipulaPy/",
    "*/site-packages/ManipulaPy/",
    "*/lib/python*/site-packages/ManipulaPy/",
]

[tool.coverage.report]
show_missing = true
precision = 1
skip_covered = false
skip_empty = false

exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self\\.debug",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError", 
    "raise RuntimeError",
    "raise ValueError",
    "if 0:",
    "if False:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if not CUDA_AVAILABLE:",
    "if not CUPY_AVAILABLE:",
    "except ImportError:",
    "except ModuleNotFoundError:",
    "cuda\\..*",
    "cupy\\..*",
    "CUDA not available",
    "GPU not available",
    "RuntimeError.*CUDA.*",
    "if not OPENCV_AVAILABLE:",
    "if not PYBULLET_AVAILABLE:",
    "if not YOLO_AVAILABLE:",
    "OpenCV not available",
    "PyBullet not available", 
    "YOLO not available",
    "ultralytics.*",
    "if sys\\.platform",
    "if platform\\.system",
    "@abstractmethod",
    "@abc\\.abstractmethod",
    "class .*\\bProtocol\\):",
    "except.*Exception",
    "except.*Error",
    "except.*Warning",
    "def __del__",
    "try:.*finally:",
    "raise NotImplementedError",
    "return NotImplemented",
    "TYPE_CHECKING",
    # Exclude graceful import handling
    "warnings\\.warn.*ImportWarning",
    "_CORE_MODULES\\.append",
    "_OPTIONAL_MODULES\\.append",
]

[tool.coverage.html]
directory = "htmlcov"
title = "ManipulaPy Coverage Report"

[tool.coverage.xml]
output = "coverage.xml"

# ==================================================================================
# CODE QUALITY TOOLS
# ==================================================================================

[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311"]
include = "\\.pyi?$"
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | __pycache__
  | ManipulaPy_data
  | Examples
  | Examples_old_backup_.*
  | Benchmark
  | benchmark_results
  | paper
  | figures
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["ManipulaPy"]
known_third_party = [
    "numpy",
    "scipy",
    "matplotlib",
    "cv2",
    "pybullet",
    "torch",
    "numba", 
    "cupy",
    "ultralytics",
    "sklearn",
    "urchin",
    "trimesh",
    "PIL",
    "pytest",
]
skip_glob = [
    "ManipulaPy_data/*",
    "build/*",
    "dist/*",
    "Examples/*",
    "Examples_old_backup_*/*",
    "Benchmark/*",
    "benchmark_results/*",
    "paper/*",
    "figures/*",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "pybullet.*",
    "urchin.*",
    "ultralytics.*",
    "cupy.*",
    "numba.*",
    "cv2.*",
    "matplotlib.*",
    "scipy.*",
    "trimesh.*",
    "pycuda.*",
    "PIL.*",
    "sklearn.*",
    "torch.*",
]
ignore_missing_imports = true

[tool.ruff]
select = [
    "E",
    "W",
    "F",
    "I",
    "B",
    "C4",
    "UP",
]
ignore = [
    "E501",
    "B008",
    "C901",
]
line-length = 88
target-version = "py38"

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]

[tool.bandit]
exclude_dirs = [
    "tests",
    "Examples", 
    "Examples_old_backup_*",
    "Benchmark",
    "benchmark_results",
]
skips = ["B101", "B601"]